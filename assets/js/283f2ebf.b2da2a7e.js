"use strict";(self.webpackChunkmy_note=self.webpackChunkmy_note||[]).push([[7498],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1281:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const a={slug:"types",title:"Types",tags:["TypeScript"]},o=void 0,l={unversionedId:"TypeScript/Types",id:"TypeScript/Types",isDocsHomePage:!1,title:"Types",description:"*",source:"@site/docs/09-TypeScript/01-Types.md",sourceDirName:"09-TypeScript",slug:"/TypeScript/types",permalink:"/my-note/docs/TypeScript/types",tags:[{label:"TypeScript",permalink:"/my-note/docs/tags/type-script"}],version:"current",sidebarPosition:1,frontMatter:{slug:"types",title:"Types",tags:["TypeScript"]},sidebar:"tutorialSidebar",previous:{title:"Reference",permalink:"/my-note/docs/CSS/reference"},next:{title:"Narrowing",permalink:"/my-note/docs/TypeScript/narrowing"}},s=[{value:"variable",id:"variable",children:[]},{value:"function",id:"function",children:[]},{value:"object",id:"object",children:[]},{value:"union",id:"union",children:[]},{value:"aliase &amp; interface",id:"aliase--interface",children:[{value:"Differences",id:"differences",children:[]}]},{value:"Type Assertion",id:"type-assertion",children:[]},{value:"Literal Types",id:"literal-types",children:[]},{value:"null &amp; undefined",id:"null--undefined",children:[{value:"strictNullChecks --off",id:"strictnullchecks---off",children:[]},{value:"strictNullChecks --on",id:"strictnullchecks---on",children:[]}]},{value:"Less Common Primitive",id:"less-common-primitive",children:[]}],c={toc:s};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("hr",null),(0,i.kt)("p",null,"\u512a\u9ede:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"static type-checking"),(0,i.kt)("li",{parentName:"ol"},"non-exception Failures"),(0,i.kt)("li",{parentName:"ol"},"types for Tooling")),(0,i.kt)("h2",{id:"variable"},"variable"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'let myName: string = "Alice"\n')),(0,i.kt)("h2",{id:"function"},"function"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'function greet(name: string): void {\n  console.log("Hello, " + name.toUpperCase() + "!!")\n}\n')),(0,i.kt)("h2",{id:"object"},"object"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'function printCoord(pt: { x: number; y: number }) {\n  console.log("The coordinate\'s x value is " + pt.x);\n  console.log("The coordinate\'s y value is " + pt.y);\n}\nprintCoord({ x: 3, y: 7 });\n')),(0,i.kt)("p",null,"optional properties: use ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," after the property name"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'function printName(obj: { first: string; last?: string }) {\n  // ...\n}\n// Both OK\nprintName({ first: "Bob" });\nprintName({ first: "Alice", last: "Alisson" });\n')),(0,i.kt)("h2",{id:"union"},"union"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'function printId(id: number | string) {\n  console.log("Your ID is: " + id);\n}\n')),(0,i.kt)("h2",{id:"aliase--interface"},"aliase & interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'type Point = {\n  x: number;\n  y: number;\n};\n\n// or\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction printCoord(pt: Point) {\n  console.log("The coordinate\'s x value is " + pt.x);\n  console.log("The coordinate\'s y value is " + pt.y);\n}\n \nprintCoord({ x: 100, y: 100 });\n')),(0,i.kt)("h3",{id:"differences"},"Differences"),(0,i.kt)("p",null,"type cannot be re-opened to add new properties vs an interface which is always extendable"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface Window {\n  title: string\n}\n\ninterface Window {\n  ts: TypeScriptAPI\n}\n\nconst src = 'const a = \"Hello World\"';\nwindow.ts.transpileModule(src, {});\n        \n// ======== vs =======\n\ntype Window = {\n  title: string\n}\n\ntype Window = {\n  ts: TypeScriptAPI\n}\n// Error: Duplicate identifier 'Window'.\n")),(0,i.kt)("h2",{id:"type-assertion"},"Type Assertion"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const myCanvas = document.getElementById("main_canvas") as HTMLCanvasElement;\n')),(0,i.kt)("h2",{id:"literal-types"},"Literal Types"),(0,i.kt)("p",null,"specific ",(0,i.kt)("strong",{parentName:"p"},"strings")," and ",(0,i.kt)("strong",{parentName:"p"},"numbers")," in type positions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'function printText(s: string, alignment: "left" | "right" | "center") {\n  // ...\n}\n\nfunction compare(a: string, b: string): -1 | 0 | 1 {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n')),(0,i.kt)("h2",{id:"null--undefined"},"null & undefined"),(0,i.kt)("h3",{id:"strictnullchecks---off"},"strictNullChecks --off"),(0,i.kt)("h3",{id:"strictnullchecks---on"},"strictNullChecks --on"),(0,i.kt)("p",null,"when a value is null or undefined, you will need to test for those values before using methods or properties on that value"),(0,i.kt)("h2",{id:"less-common-primitive"},"Less Common Primitive"),(0,i.kt)("p",null,"bigint:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const oneHundred: bigint = BigInt(100);\n")),(0,i.kt)("p",null,"symbol:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const firstName = Symbol("name");\nconst secondName = Symbol("name");\n \nif (firstName === secondName) {\n  // Can\'t ever happen\n}\n')))}p.isMDXComponent=!0}}]);