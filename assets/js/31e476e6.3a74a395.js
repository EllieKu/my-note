"use strict";(self.webpackChunkmy_note=self.webpackChunkmy_note||[]).push([[6434],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(t),d=o,g=l["".concat(c,".").concat(d)]||l[d]||f[d]||i;return t?r.createElement(g,a(a({ref:n},p),{},{components:t})):r.createElement(g,a({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3673:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={slug:"functions",title:"Functions",tags:["TypeScript"]},a=void 0,s={unversionedId:"TypeScript/Functions",id:"TypeScript/Functions",isDocsHomePage:!1,title:"Functions",description:"*",source:"@site/docs/09-TypeScript/03-Functions.md",sourceDirName:"09-TypeScript",slug:"/TypeScript/functions",permalink:"/my-note/docs/TypeScript/functions",tags:[{label:"TypeScript",permalink:"/my-note/docs/tags/type-script"}],version:"current",sidebarPosition:3,frontMatter:{slug:"functions",title:"Functions",tags:["TypeScript"]},sidebar:"tutorialSidebar",previous:{title:"Narrowing",permalink:"/my-note/docs/TypeScript/narrowing"}},c=[{value:"function type expressions",id:"function-type-expressions",children:[]},{value:"Call Signatures",id:"call-signatures",children:[]},{value:"Construct Signatures",id:"construct-signatures",children:[]},{value:"Generic Functions",id:"generic-functions",children:[]},{value:"Constraints",id:"constraints",children:[]}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"function-type-expressions"},"function type expressions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function greeter(fn: (a: string) => void) {\n  fn("Hello, World");\n}\n \nfunction printToConsole(s: string) {\n  console.log(s);\n}\n\n// or\n\n// type GreetFunction = (a: string) => void\n\n// function greeter(fn: GreetFunction) {\n//   ...\n// }\n \ngreeter(printToConsole);\n')),(0,o.kt)("h2",{id:"call-signatures"},"Call Signatures"),(0,o.kt)("p",null,"In JavaScript, functions can have properties in addition to being callable. we can write a call signature in an object type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'type DescribableFunction = {\n  description: string;\n  (someArg: number): boolean;\n};\nfunction doSomething(fn: DescribableFunction) {\n  console.log(fn.description + " returned " + fn(10));\n}\n\nfunction test(num:number):boolean {\n  return num > 5\n}\n\ntest.description = \'is lager than 5\'\n\ndoSomething(test) // "is lager than 5 returned true"\n')),(0,o.kt)("h2",{id:"construct-signatures"},"Construct Signatures"),(0,o.kt)("p",null,"????"),(0,o.kt)("h2",{id:"generic-functions"},"Generic Functions"),(0,o.kt)("p",null,"use ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," to describe a correspondence between two values"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function firstElement<Type>(arr: Type[]): Type | undefined {\n  return arr[0];\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function map<Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[] {\n  return arr.map(func);\n}\n \n// Parameter 'n' is of type 'string'\n// 'parsed' is of type 'number[]'\nconst parsed = map([\"1\", \"2\", \"3\"], (n) => parseInt(n));\n")),(0,o.kt)("h2",{id:"constraints"},"Constraints"),(0,o.kt)("p",null,"use ",(0,o.kt)("inlineCode",{parentName:"p"},"extends")," to set a subset of values"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function longest<Type extends { length: number }>(a: Type, b: Type) {\n  if (a.length >= b.length) {\n    return a;\n  } else {\n    return b;\n  }\n}\n")))}p.isMDXComponent=!0}}]);