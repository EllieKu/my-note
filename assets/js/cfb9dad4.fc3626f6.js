"use strict";(self.webpackChunkmy_note=self.webpackChunkmy_note||[]).push([[126],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(y,o(o({ref:t},s),{},{components:n})):r.createElement(y,o({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4274:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={slug:"narrowing",title:"Narrowing",tags:["TypeScript"]},o=void 0,l={unversionedId:"TypeScript/Narrowing",id:"TypeScript/Narrowing",isDocsHomePage:!1,title:"Narrowing",description:"*",source:"@site/docs/09-TypeScript/02-Narrowing.md",sourceDirName:"09-TypeScript",slug:"/TypeScript/narrowing",permalink:"/my-note/docs/TypeScript/narrowing",tags:[{label:"TypeScript",permalink:"/my-note/docs/tags/type-script"}],version:"current",sidebarPosition:2,frontMatter:{slug:"narrowing",title:"Narrowing",tags:["TypeScript"]},sidebar:"tutorialSidebar",previous:{title:"Types",permalink:"/my-note/docs/TypeScript/types"},next:{title:"Functions",permalink:"/my-note/docs/TypeScript/functions"}},p=[{value:"typeof",id:"typeof",children:[]},{value:"in operator",id:"in-operator",children:[]},{value:"instanceof",id:"instanceof",children:[]},{value:"type predicate",id:"type-predicate",children:[]},{value:"never",id:"never",children:[]}],c={toc:p};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("p",null,"the process of refining types to more specific types than declared is called narrowing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'function padLeft(padding: number | string, input: string) {\n  if (typeof padding === "number") {\n    return " ".repeat(padding) + input; \n  }\n  return padding + input;\n}\n')),(0,a.kt)("h2",{id:"typeof"},"typeof"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Result"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,a.kt)("td",{parentName:"tr",align:null},'"boolean"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"BigInt"),(0,a.kt)("td",{parentName:"tr",align:null},'"bigint"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"String"),(0,a.kt)("td",{parentName:"tr",align:null},'"string"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Symbol"),(0,a.kt)("td",{parentName:"tr",align:null},'"symbol"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Function"),(0,a.kt)("td",{parentName:"tr",align:null},'"function"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Any other object"),(0,a.kt)("td",{parentName:"tr",align:null},'"object"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Null"),(0,a.kt)("td",{parentName:"tr",align:null},'"object" ',(0,a.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null"},"(reason)"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Undefined"),(0,a.kt)("td",{parentName:"tr",align:null},'"undefined"')))),(0,a.kt)("h2",{id:"in-operator"},"in operator"),(0,a.kt)("p",null,"if an object has a property with a name, use ",(0,a.kt)("inlineCode",{parentName:"p"},"in")," operator"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'type Fish = { swim: () => void };\ntype Bird = { fly: () => void };\n \nfunction move(animal: Fish | Bird) {\n  if ("swim" in animal) {\n    return animal.swim();\n  }\n \n  return animal.fly();\n}\n')),(0,a.kt)("h2",{id:"instanceof"},"instanceof"),(0,a.kt)("p",null,"check whether or not a value is an \u201cinstance\u201d of another value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"\nfunction logValue(x: Date | string) {\n  if (x instanceof Date) {\n    console.log(x.toUTCString());\n  } else {\n    console.log(x.toUpperCase());\n  }\n}\n")),(0,a.kt)("h2",{id:"type-predicate"},"type predicate"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"parameterName is Type")," define a function whose return type is a type predicate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n")),(0,a.kt)("h2",{id:"never"},"never"),(0,a.kt)("p",null,"never type represent a state which shouldn\u2019t exist."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'type Shape = Circle | Square;\n \nfunction getArea(shape: Shape) {\n  switch (shape.kind) {\n    case "circle":\n      return Math.PI * shape.radius ** 2;\n    case "square":\n      return shape.sideLength ** 2;\n    default:\n      const _exhaustiveCheck: never = shape;\n      return _exhaustiveCheck;\n  }\n}\n')))}s.isMDXComponent=!0}}]);